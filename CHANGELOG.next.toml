# Example changelog entries
# [[aws-sdk-rust]]
# message = "Fix typos in module documentation for generated crates"
# references = ["smithy-rs#920"]
# meta = { "breaking" = false, "tada" = false, "bug" = false }
# author = "rcoh"
#
# [[smithy-rs]]
# message = "Fix typos in module documentation for generated crates"
# references = ["smithy-rs#920"]
# meta = { "breaking" = false, "tada" = false, "bug" = false, "target" = "client | server | all"}
# author = "rcoh"

[[smithy-rs]]
message = "`@sparse` list shapes and map shapes with constraint traits and with constrained members are now supported"
references = ["smithy-rs#2213"]
meta = { "breaking" = false, "tada" = false, "bug" = true, "target" = "server"}
author = "david-perez"

[[aws-sdk-rust]]
message = """Integrate Endpoints 2.0 into the Rust SDK. Endpoints 2.0 enables features like S3 virtual addressing & S3
object lambda. As part of this change, there are several breaking changes although efforts have been made to deprecate
where possible to smooth the upgrade path.
1. `aws_smithy_http::endpoint::Endpoint` and the `endpoint_resolver` methods have been deprecated. In general, these usages
   should be replaced with usages of `endpoint_url` instead. `endpoint_url` accepts a string so an `aws_smithy_http::Endpoint`
   does not need to be constructed. This structure and methods will be removed in a future release.
2. The `endpoint_resolver` method on `<service>::config::Builder` now accepts a service specific endpoint resolver instead
   of an implementation of `ResolveAwsEndpoint`. Most users will be able to replace these usages with a usage of `endpoint_url`.
3. `ResolveAwsEndpoint` has been deprecated and will be removed in a future version of the SDK.
4. The SDK does not support "pseudo regions" anymore. Specifically, regions like `iam-fips` will no longer resolve to a FIPS endpoint.
"""
references = ["smithy-rs#1784", "smithy-rs#2074"]
meta = { "breaking" = true, "tada" = true, "bug" = false }
author = "rcoh"

[[aws-sdk-rust]]
message = """Add additional configuration parameters to `aws_sdk_s3::Config`.

The launch of endpoints 2.0 includes more configuration options for S3. The default behavior for endpoint resolution has
been changed. Before, all requests hit the path-style endpoint. Going forward, all requests that can be routed to the
virtually hosted bucket will be routed there automatically.
- `force_path_style`: Requests will now default to the virtually-hosted endpoint `<bucketname>.s3.<region>.amazonaws.com`
- `use_arn_region`: Enables this client to use an ARN’s region when constructing an endpoint instead of the client’s configured region.
- `accelerate`: Enables this client to use S3 Transfer Acceleration endpoints.

Note: the AWS SDK for Rust does not currently support Multi Region Access Points (MRAP).
"""
references = ["smithy-rs#1784", "smithy-rs#2074"]
meta = { "breaking" = true, "tada" = true, "bug" = false }
author = "rcoh"

[[aws-sdk-rust]]
message = """
Move types for AWS SDK credentials to a separate crate.
A new AWS runtime crate called `aws-credential-types` has been introduced. Types for AWS SDK credentials have been moved to that crate from `aws-config` and `aws-types`. The new crate is placed at the top of the dependency graph among AWS runtime crates with the aim of the downstream crates having access to the types defined in it.
"""
references = ["smithy-rs#2108"]
meta = { "breaking" = true, "tada" = false, "bug" = false }
author = "ysaito1001"

[[aws-sdk-rust]]
references = ["smithy-rs#2152"]
meta = { "breaking" = false, "tada" = false, "bug" = false }
author = "rcoh"
message = """Add support for overriding profile name and profile file location across all providers. Prior to this change, each provider needed to be updated individually.

### Before
```rust
use aws_config::profile::{ProfileFileCredentialsProvider, ProfileFileRegionProvider};
use aws_config::profile::profile_file::{ProfileFiles, ProfileFileKind};

let profile_files = ProfileFiles::builder()
    .with_file(ProfileFileKind::Credentials, "some/path/to/credentials-file")
    .build();
let credentials_provider = ProfileFileCredentialsProvider::builder()
    .profile_files(profile_files.clone())
    .build();
let region_provider = ProfileFileRegionProvider::builder()
    .profile_files(profile_files)
    .build();

let sdk_config = aws_config::from_env()
    .credentials_provider(credentials_provider)
    .region(region_provider)
    .load()
    .await;
```

### After
```rust
use aws_config::profile::{ProfileFileCredentialsProvider, ProfileFileRegionProvider};
use aws_config::profile::profile_file::{ProfileFiles, ProfileFileKind};

let profile_files = ProfileFiles::builder()
    .with_file(ProfileFileKind::Credentials, "some/path/to/credentials-file")
    .build();
let sdk_config = aws_config::from_env()
    .profile_files(profile_files)
    .load()
    .await;
/// ```
"""

[[smithy-rs]]
message = "Fix bug where string default values were not supported for endpoint parameters"
references = ["smithy-rs#2150"]
meta = { "breaking" = false, "tada" = false, "bug" = true, "target" = "client" }
author = "rcoh"

[[aws-sdk-rust]]
references = ["smithy-rs#2162"]
meta = { "breaking" = true, "tada" = false, "bug" = false }
message = "`aws_config::profile::retry_config` && `aws_config::environment::retry_config` have been removed. Use `aws_config::default_provider::retry_config` instead."
author = "rcoh"

[[smithy-rs]]
references = ["smithy-rs#2170", "aws-sdk-rust#706"]
meta = { "breaking" = false, "tada" = false, "bug" = true }
message = "Remove the webpki-roots feature from `hyper-rustls`"
author = "rcoh"

[[aws-sdk-rust]]
references = ["smithy-rs#2168"]
meta = { "breaking" = false, "tada" = true, "bug" = false }
message = """Add support for resolving FIPS and dual-stack endpoints.

FIPS and dual-stack endpoints can each be configured in multiple ways:
1. Automatically from the environment and AWS profile
2. Across all clients loaded from the same `SdkConfig` via `from_env().use_dual_stack(true).load().await`
3. At a client level when constructing the configuration for an individual client.

Note: Not all services support FIPS and dual-stack.
"""
author = "rcoh"

[[aws-sdk-rust]]
message = """
Improve SDK credentials caching through type safety. `LazyCachingCredentialsProvider` has been renamed to `LazyCredentialsCache` and is no longer treated as a credentials provider. Furthermore, you do not create a `LazyCredentialsCache` directly, and instead you interact with `CredentialsCache`. This introduces the following breaking changes.

If you previously used `LazyCachingCredentialsProvider`, you can replace it with `CredentialsCache`.
<details>
<summary>Example</summary>

Before:
```rust
use aws_config::meta::credentials::lazy_caching::LazyCachingCredentialsProvider;
use aws_types::provider::ProvideCredentials;

fn make_provider() -> impl ProvideCredentials {
    // --snip--
}

let credentials_provider =
    LazyCachingCredentialsProvider::builder()
        .load(make_provider())
        .build();

let sdk_config = aws_config::from_env()
    .credentials_provider(credentials_provider)
    .load()
    .await;

let client = aws_sdk_s3::Client::new(&sdk_config);
```

After:
```rust
use aws_credential_types::cache::CredentialsCache;
use aws_types::provider::ProvideCredentials;
use std::sync::Arc;

fn make_provider() -> impl ProvideCredentials {
    // --snip--
}

// Wrapping a result of `make_provider` in `LazyCredentialsCache` is done automatically.
let sdk_config = aws_config::from_env()
    .credentials_cache(CredentialsCache::lazy()) // This line can be omitted because it is on by default.
    .credentials_provider(Arc::new(make_provider()))
    .load()
    .await;

let client = aws_sdk_s3::Client::new(&sdk_config);
```

If you previously configured a `LazyCachingCredentialsProvider`, you can use the builder for `LazyCredentialsCache` instead.

Before:
```rust
use aws_config::meta::credentials::lazy_caching::LazyCachingCredentialsProvider;
use aws_types::provider::ProvideCredentials;
use std::time::Duration;

fn make_provider() -> impl ProvideCredentials {
    // --snip--
}

let credentials_provider =
    LazyCachingCredentialsProvider::builder()
        .load(make_provider())
        .load_timeout(Duration::from_secs(60)) // Configures timeout.
        .build();

let sdk_config = aws_config::from_env()
    .credentials_provider(credentials_provider)
    .load()
    .await;

let client = aws_sdk_s3::Client::new(&sdk_config);
```

After:
```rust
use aws_credential_types::cache::CredentialsCache;
use aws_types::provider::ProvideCredentials;
use std::sync::Arc;
use std::time::Duration;

fn make_provider() -> impl ProvideCredentials {
    // --snip--
}

let sdk_config = aws_config::from_env()
    .credentials_cache(
        CredentialsCache::lazy_builder()
            .load_timeout(Duration::from_secs(60)) // Configures timeout.
            .into_credentials_cache(),
    )
    .credentials_provider(Arc::new(make_provider()))
    .load()
    .await;

let client = aws_sdk_s3::Client::new(&sdk_config);
```

The examples above only demonstrate how to use `credentials_cache` and `credentials_provider` methods on `aws_config::ConfigLoader` but the same code update can be applied when you interact with `aws_types::sdk_config::Builder` or the builder for a service-specific config, e.g. `aws_sdk_s3::config::Builder`.

</details>


If you previously configured a `DefaultCredentialsChain` by calling `load_timeout`, `buffer_time`, or `default_credential_expiration` on its builder, you need to call the same set of methods on the builder for `LazyCredentialsCache` instead.
<details>
<summary>Example</summary>

Before:
```rust
use aws_config::default_provider::credentials::DefaultCredentialsChain;
use std::time::Duration;

let credentials_provider = DefaultCredentialsChain::builder()
    .buffer_time(Duration::from_secs(30))
    .default_credential_expiration(Duration::from_secs(20 * 60))
    .build()
    .await;

let sdk_config = aws_config::from_env()
    .credentials_provider(credentials_provider)
    .load()
    .await;

let client = aws_sdk_s3::Client::new(&sdk_config);
```

After:
```rust
use aws_config::default_provider::credentials::default_provider;
use aws_credential_types::cache::CredentialsCache;
use std::sync::Arc;
use std::time::Duration;

// Previously used methods no longer exist on the builder for `DefaultCredentialsChain`.
let credentials_provider = default_provider().await;

let sdk_config = aws_config::from_env()
    .credentials_cache(
        CredentialsCache::lazy_builder()
            .buffer_time(Duration::from_secs(30))
            .default_credential_expiration(Duration::from_secs(20 * 60))
            .into_credentials_cache(),
    )
    .credentials_provider(Arc::new(credentials_provider))
    .load()
    .await;

let client = aws_sdk_s3::Client::new(&sdk_config);
```

</details>
"""
references = ["smithy-rs#2122"]
meta = { "breaking" = true, "tada" = false, "bug" = false }
author = "ysaito1001"

[[aws-sdk-rust]]
message = """
The introduction of `CredentialsCache` comes with an accompanying type `SharedCredentialsCache`. This replaces `SharedCredentialsProvider` and as a result, `aws_http::auth:set_provider` has been updated to `aws_http::auth::set_credentials_cache`.

Before:
```rust
use aws_credential_types::Credentials;
use aws_credential_types::provider::SharedCredentialsProvider;
use aws_http::auth::set_provider;
use aws_smithy_http::body::SdkBody;
use aws_smithy_http::operation;

let mut req = operation::Request::new(http::Request::new(SdkBody::from("some body")));
let credentials = Credentials::new("example", "example", None, None, "my_provider_name");
set_provider(
    &mut req.properties_mut(),
    SharedCredentialsProvider::new(credentials),
);
```

After:
```rust
use aws_credential_types::Credentials;
use aws_credential_types::cache::{CredentialsCache, SharedCredentialsCache};
use aws_http::auth::set_credentials_cache;
use aws_smithy_http::body::SdkBody;
use aws_smithy_http::operation;
use std::sync::Arc;

let mut req = operation::Request::new(http::Request::new(SdkBody::from("some body")));
let credentials = Credentials::new("example", "example", None, None, "my_provider_name");
let credentials_cache = CredentialsCache::lazy_builder()
    .into_credentials_cache()
    .create_cache(Arc::new(credentials));
set_credentials_cache(
    &mut req.properties_mut(),
    SharedCredentialsCache::new(credentials_cache),
);
```
"""
references = ["smithy-rs#2122"]
meta = { "breaking" = true, "tada" = false, "bug" = false }
author = "ysaito1001"
