# This file will be used by automation when cutting a release of the SDK
# to include code generator change log entries into the release notes.
# This is an auto-generated file. Do not edit.

{
  "smithy-rs": [],
  "aws-sdk-rust": [
    {
      "message": "Fix minimum throughput detection for downloads to avoid incorrectly raising an error while the user is consuming data at a slow but steady pace.\n",
      "meta": {
        "bug": true,
        "breaking": false,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#3871",
        "aws-sdk-rust#1202"
      ],
      "since-commit": "1e803494dc1c9f1d8290cf9317ed39b026a603a2",
      "age": 5
    },
    {
      "message": "Client SDKs built with the `awsQueryCompatible` trait now include the `x-amzn-query-mode` header. This header signals the service that the clients are operating in compatible mode.\n",
      "meta": {
        "bug": false,
        "breaking": false,
        "tada": false
      },
      "author": "ysaito1001",
      "references": [
        "smithy-rs#3883"
      ],
      "since-commit": "c606065c0e2e97d3cecb6a675ffc226dc488d674",
      "age": 4
    },
    {
      "message": "Fix default credential provider chain not respecting endpoint URL overrides from environment\n",
      "meta": {
        "bug": true,
        "breaking": false,
        "tada": false
      },
      "author": "aajtodd",
      "references": [
        "aws-sdk-rust#1193"
      ],
      "since-commit": "c606065c0e2e97d3cecb6a675ffc226dc488d674",
      "age": 4
    },
    {
      "message": "Add auth token generator for Amazon Aurora DSQL.\n\n```rust\nuse aws_sdk_dsql::auth_token::{AuthTokenGenerator, Config};\n\n#[tokio::main]\nasync fn main() {\n   let cfg = aws_config::load_defaults(BehaviorVersion::latest()).await;\n   let generator = AuthTokenGenerator::new(\n       Config::builder()\n           .hostname(\"peccy.dsql.us-east-1.on.aws\")\n           .build()\n           .expect(\"cfg is valid\"),\n   );\n   let token = generator.auth_token(&cfg).await.unwrap();\n   println!(\"{token}\");\n}\n```\n\nThe resulting token can then be used as a password when connecting to the\ndatabase server.\n",
      "meta": {
        "bug": false,
        "breaking": false,
        "tada": true
      },
      "author": "Velfi",
      "references": [],
      "since-commit": "039177d0ee6dd288ad57de2230a1110bbe7ff7d5",
      "age": 1
    }
  ],
  "aws-sdk-model": []
}