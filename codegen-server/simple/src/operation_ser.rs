// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn serialize_healthcheck_response(
    output: &crate::output::HealthcheckOutput,
) -> std::result::Result<
    http::Response<aws_smithy_http_server::Body>,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_structure_crate_output_healthcheck_output(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::Body::from(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_register_service_response(
    output: &crate::output::RegisterServiceOutput,
) -> std::result::Result<
    http::Response<aws_smithy_http_server::Body>,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let payload =
            crate::operation_ser::serialize_structure_crate_output_register_service_output(output)?;
        #[allow(unused_mut)]
        let mut response = http::Response::builder();
        response.body(aws_smithy_http_server::Body::from(payload))?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn serialize_register_service_error(
    error: &crate::error::RegisterServiceError,
) -> std::result::Result<
    http::Response<aws_smithy_http_server::Body>,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    Ok({
        let response: http::Response<aws_smithy_http_server::Body>;
        match error {
            crate::error::RegisterServiceError::ResourceAlreadyExists(var_1) => {
                let payload =
                    crate::operation_ser::serialize_structure_crate_error_resource_already_exists(
                        var_1,
                    )?;
                response = http::Response::builder()
                    .status(400)
                    .body(aws_smithy_http_server::Body::from(payload))?;
            }
        };
        response
    })
}

pub fn serialize_structure_crate_output_healthcheck_output(
    value: &crate::output::HealthcheckOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_healthcheck_output(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_output_register_service_output(
    value: &crate::output::RegisterServiceOutput,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_output_register_service_output(&mut object, value)?;
    object.finish();
    Ok(out)
}

pub fn serialize_structure_crate_error_resource_already_exists(
    value: &crate::error::ResourceAlreadyExists,
) -> Result<String, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_error_resource_already_exists(&mut object, value)?;
    object.finish();
    Ok(out)
}
