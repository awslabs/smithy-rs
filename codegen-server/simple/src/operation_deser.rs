// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub async fn parse_healthcheck_request<B>(
    request: &mut axum::extract::RequestParts<B>,
) -> std::result::Result<
    crate::input::HealthcheckInput,
    aws_smithy_http_server::rejection::SmithyRejection,
>
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::healthcheck_input::Builder::default();
        let body = request
            .take_body()
            .ok_or(aws_smithy_http_server::rejection::BodyAlreadyExtracted)?;
        let bytes = hyper::body::to_bytes(body).await?;
        if !bytes.is_empty() {
            aws_smithy_http_server::protocols::check_json_content_type(request)?;
            input = crate::json_deser::deser_structure_crate_input_healthcheck_input(
                bytes.as_ref(),
                input,
            )?;
        }
        input.build()?
    })
}

#[allow(clippy::unnecessary_wraps)]
pub async fn parse_register_service_request<B>(
    request: &mut axum::extract::RequestParts<B>,
) -> std::result::Result<
    crate::input::RegisterServiceInput,
    aws_smithy_http_server::rejection::SmithyRejection,
>
where
    B: aws_smithy_http_server::HttpBody + Send,
    B::Data: Send,
    B::Error: Into<aws_smithy_http_server::BoxError>,
    aws_smithy_http_server::rejection::SmithyRejection:
        From<<B as aws_smithy_http_server::HttpBody>::Error>,
{
    Ok({
        #[allow(unused_mut)]
        let mut input = crate::input::register_service_input::Builder::default();
        let body = request
            .take_body()
            .ok_or(aws_smithy_http_server::rejection::BodyAlreadyExtracted)?;
        let bytes = hyper::body::to_bytes(body).await?;
        if !bytes.is_empty() {
            aws_smithy_http_server::protocols::check_json_content_type(request)?;
            input = crate::json_deser::deser_structure_crate_input_register_service_input(
                bytes.as_ref(),
                input,
            )?;
        }
        lazy_static::lazy_static! {
            static ref RE: regex::Regex = regex::Regex::new("/service/(?P<id>[^/]+)").unwrap();
        }
        if let Some(captures) = RE.captures(request.uri().path()) {
            if let Some(m) = captures.name("id") {
                input = input.set_id(
                    crate::operation_deser::parse_label_register_service_input_id(m.as_str())?,
                );
            }
        }
        input.build()?
    })
}

pub fn parse_label_register_service_input_id(
    value: &str,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http_server::rejection::SmithyRejection,
> {
    let value = percent_encoding::percent_decode_str(value).decode_utf8()?;
    Ok(Some(value.into_owned()))
}
