// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Error type for the `RegisterService` operation.
/// Each variant represents an error that can occur for the `RegisterService` operation.
#[derive(std::fmt::Debug)]
pub enum RegisterServiceError {
    /// Returned when a new resource cannot be created because one already exists.
    ///
    ResourceAlreadyExists(crate::error::ResourceAlreadyExists),
}
impl std::fmt::Display for RegisterServiceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self {
            RegisterServiceError::ResourceAlreadyExists(_inner) => _inner.fmt(f),
        }
    }
}
impl RegisterServiceError {
    /// Returns `true` if the error kind is `RegisterServiceError::ResourceAlreadyExists`.
    pub fn is_resource_already_exists(&self) -> bool {
        matches!(&self, RegisterServiceError::ResourceAlreadyExists(_))
    }
}
impl std::error::Error for RegisterServiceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self {
            RegisterServiceError::ResourceAlreadyExists(_inner) => Some(_inner),
        }
    }
}

/// Returned when a new resource cannot be created because one already exists.
///
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceAlreadyExists {
    #[allow(missing_docs)] // documentation missing in model
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceAlreadyExists {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceAlreadyExists");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceAlreadyExists {
    /// Returns the error message.
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceAlreadyExists {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceAlreadyExists")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceAlreadyExists {}
/// See [`ResourceAlreadyExists`](crate::error::ResourceAlreadyExists)
pub mod resource_already_exists {
    /// A builder for [`ResourceAlreadyExists`](crate::error::ResourceAlreadyExists)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        #[allow(missing_docs)] // documentation missing in model
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceAlreadyExists`](crate::error::ResourceAlreadyExists)
        pub fn build(self) -> crate::error::ResourceAlreadyExists {
            crate::error::ResourceAlreadyExists {
                message: self.message,
            }
        }
    }
}
impl ResourceAlreadyExists {
    /// Creates a new builder-style object to manufacture [`ResourceAlreadyExists`](crate::error::ResourceAlreadyExists)
    pub fn builder() -> crate::error::resource_already_exists::Builder {
        crate::error::resource_already_exists::Builder::default()
    }
}
