on:
  push:
    branches: [main]
    tags:
    - '*'
  pull_request:

name: AWS SDK CI

env:
  rust_version: 1.54.0
  rust_toolchain_components: clippy,rustfmt
  java_version: 11

jobs:
  generate-smoke-test:
    name: Smoke Test - Generate
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      name: Gradle Cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_version }}
    - name: Generate the SDK
      run: ./gradlew :aws:sdk:assemble
    - name: Generate a list of services with tests
      run: python aws/sdk/test-services.py > aws/sdk/build/aws-sdk/services-with-tests
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - name: Tar the SDK
      run: tar -cvf sdk.tar -C aws/sdk/build/aws-sdk/ .
    - uses: actions/upload-artifact@v2
      name: Upload SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-smoketest-${{ github.sha }}
        path: sdk.tar

  smoke-test:
    name: Smoke Test
    needs: generate-smoke-test
    runs-on: ubuntu-latest
    # To avoid repeating setup boilerplate, we have the actual test commands
    # in a matrix strategy. These commands get run in the steps after all of the setup.
    strategy:
      fail-fast: false
      matrix:
        test:
        - name: Unit Tests
          run: cargo test --all-features
        - name: Docs
          run: cargo doc --no-deps --document-private-items
        - name: Clippy
          run: cargo clippy
        - name: Unused Dependencies
          run: cargo +nightly udeps
        - name: Additional per-crate checks
          run: ../tools/additional-per-crate-checks.sh ./sdk/
        - name: Failure test
          run: exit 1
    env:
      # Disable incremental compilation to reduce disk space use
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -D warnings
      # Note: the .cargo/config.toml is lost because we untar the SDK rather than checking out the repo,
      # so we have to manually restore the target directory override
      CARGO_TARGET_DIR: ../target
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        default: false
    - name: Cache cargo bin
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ github.job }}-${{ runner.os }}-${{ env.rust_version }}
    - name: Install additional cargo binaries
      run: |
        if [[ ! -f ~/.cargo/bin/cargo-udeps ]]; then
          cargo +nightly install cargo-udeps
        fi
        if [[ ! -f ~/.cargo/bin/cargo-hack ]]; then
          cargo install cargo-hack
        fi
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      name: Download SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-smoketest-${{ github.sha }}
        path: artifact
    - name: untar
      run: mkdir aws-sdk && cd aws-sdk && tar -xvf ../artifact/sdk.tar
      # Pinned to the commit hash of v1.3.0
    - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641
      with:
        sharedKey: ${{ runner.os }}-${{ env.rust_version }}-${{ github.job }}
        target-dir: ../target
    # This runs the commands from the matrix strategy
    - name: ${{ matrix.test.name }}
      run: ${{ matrix.test.run }}
      working-directory: aws-sdk

  # Psuedo-job that depends on the smoke-test job so that we don't have to enter
  # the myriad of test matrix combinations into GitHub's protected branch rules
  require-smoke-tests:
    needs: smoke-test
    # Run this job even if its dependency jobs fail
    if: always()
    runs-on: ubuntu-latest
    name: Smoke Test Matrix Success
    steps:
    - name: Verify jobs succeeded
      uses: re-actors/alls-green@3a2de129f0713010a71314c74e33c0e3ef90e696
      with:
        jobs: ${{ toJSON(needs) }}

  standalone-integration-tests-check:
    name: Standalone Integration Tests - cargo check
    needs: generate-smoke-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      # Pinned to the commit hash of v1.3.0
    - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641
      with:
        working-directory: aws/sdk/integration-tests
        sharedKey: ${{ runner.os }}-${{ env.rust_version }}-${{ github.job }}
        target-dir: ../../../target
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    # The integration tests path-depend on crates in the build/ path, so we have to download a generated SDK
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      name: Download SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-smoketest-${{ github.sha }}
        path: artifact
    - name: untar
      run: mkdir -p aws/sdk/build/aws-sdk && cd aws/sdk/build/aws-sdk && tar -xvf ../../../../artifact/sdk.tar
    - name: Check integration tests
      run: cargo check
      working-directory: aws/sdk/integration-tests
      env:
        RUSTC_FORCE_INCREMENTAL: 1
        RUSTFLAGS: -D warnings

  all-services-check:
    name: Full SDK - Generate and cargo check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      name: Gradle Cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_version }}
    - name: Generate and check all services
      run: ./gradlew -Paws.fullsdk=true :aws:sdk:cargoCheck
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - name: Tar the SDK
      run: tar -cvf sdk.tar -C aws/sdk/build/aws-sdk/ .
    - uses: actions/upload-artifact@v2
      name: Upload SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-${{ github.sha }}
        path: sdk.tar
