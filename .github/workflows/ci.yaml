on:
  push:
    branches: [main]
    tags:
    - '*'
  pull_request:

name: CI

env:
  rust_version: 1.56.1
  rust_toolchain_components: clippy,rustfmt

jobs:
  # This job detects if the PR made changes to build tools. If it did, then it builds a new
  # build Docker image. Otherwise, it downloads a build image from Public ECR. In both cases,
  # it uploads the image as a build artifact for other jobs to download and use.
  acquire-build-image:
    name: Acquire Build Image
    runs-on: ubuntu-latest
    outputs:
      image-in-artifacts: ${{ steps.acquire.outputs.image-in-artifacts }}
    steps:
    - uses: actions/checkout@v2
      with:
        path: smithy-rs
    - name: Acquire build image
      id: acquire
      run: |
        set -x
        ./smithy-rs/tools/ci-build/acquire-build-image --nothing-or-local-if-changed ${{ github.event.pull_request.base.sha }};
        if (docker inspect smithy-rs-build-image-original:latest &>/dev/null); then
          docker save -o smithy-rs-build-image-original smithy-rs-build-image-original:latest;
          echo "::set-output name=image-in-artifacts::true";
        else
          echo "::set-output name=image-in-artifacts::false";
        fi
    - name: Upload build image
      uses: actions/upload-artifact@v3
      with:
        name: smithy-rs-build-image-original
        path: smithy-rs-build-image-original
        retention-days: 1

  tests:
    name: Tests
    needs: acquire-build-image
    runs-on: ubuntu-latest
    # To avoid repeating setup boilerplate, we have the actual test commands
    # in a matrix strategy. These commands get run in the steps after all the setup.
    strategy:
      fail-fast: false
      matrix:
        test:
        - name: Lints
          action: check-style-and-lints
        - name: Rust Runtimes and Tools
          action: check-rust-runtimes-and-tools
        - name: Client Unit Tests
          action: check-client-codegen-unit-tests
        - name: SDK Unit Tests
          action: check-sdk-codegen-unit-tests
        - name: Server Unit Tests
          action: check-server-codegen-unit-tests
        - name: Client Integration Tests
          action: check-client-codegen-integration-tests
        - name: Server Integration Tests
          action: check-server-codegen-integration-tests
        - name: Generate smithy-rs Runtime Bundle
          action: generate-smithy-rs-runtime-bundle
    steps:
    - uses: actions/checkout@v2
      with:
        path: smithy-rs
    - uses: actions/cache@v2
      name: Gradle Cache
      with:
        path: |
          gradle/caches
          gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/caches/**/*', 'gradle/wrapper/**/*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    # Pinned to the commit hash of v1.3.0
    - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641
      with:
        sharedKey: ${{ runner.os }}-${{ env.rust_version }}-${{ github.job }}
        target-dir: ./smithy-rs-target
    - name: Download build image
      if: ${{ needs.acquire-build-image.outputs.image-in-artifacts == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: smithy-rs-build-image-original
    - name: Prepare build image
      run: |
        if [[ "${{ needs.acquire-build-image.outputs.image-in-artifacts }}" == "true" ]]; then
          docker load -i smithy-rs-build-image-original
        else
          ./smithy-rs/tools/ci-build/acquire-build-image --force-remote
        fi
        ./smithy-rs/tools/ci-build/create-local-build-image
    # This runs the commands from the matrix strategy
    - name: ${{ matrix.test.name }}
      run: ./smithy-rs/tools/ci-build/ci-action ${{ matrix.test.action }}
    - name: Upload artifacts
      if: ${{ matrix.test.action == 'generate-smithy-rs-runtime-bundle' }}
      uses: actions/upload-artifact@v3
      with:
        name: smithy-rs-runtime-${{ github.sha }}
        path: artifacts

  windows-rust-tests:
    name: Windows Rust Tests
    runs-on: windows-latest
    env:
      # Disable incremental compilation to reduce disk space use
      CARGO_INCREMENTAL: 0
      RUSTDOCFLAGS: -D warnings
      RUSTFLAGS: -D warnings
    steps:
    - uses: actions/checkout@v2
      # Pinned to the commit hash of v1.3.0
    - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641
      with:
        sharedKey: ${{ runner.os }}-${{ env.rust_version }}-${{ github.job }}
        target-dir: ./target
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Run tests
      shell: bash
      run: |
        for runtime_path in "rust-runtime" "aws/rust-runtime"; do
          pushd "${runtime_path}" &>/dev/null
          cargo test --all-features
          cargo doc --no-deps --document-private-items --all-features
          popd &>/dev/null
        done

  # Psuedo-job that depends on matrix jobs so that we don't have to enter
  # the myriad of test matrix combinations into GitHub's protected branch rules
  require-all:
    needs:
    - tests
    - windows-rust-tests
    # Run this job even if its dependency jobs fail
    if: always()
    runs-on: ubuntu-latest
    name: Matrix Success
    steps:
    - name: Verify jobs succeeded
      uses: re-actors/alls-green@3a2de129f0713010a71314c74e33c0e3ef90e696
      with:
        jobs: ${{ toJSON(needs) }}
