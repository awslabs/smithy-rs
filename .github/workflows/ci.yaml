on:
  push:
    tags:
    - '*'
  pull_request:

name: CI

env:
  rust_version: 1.51.0
  rust_toolchain_components: "clippy,rustfmt,rustdoc"
  java_version: 11

jobs:
  style:
    name: Kotlin style checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_version }}
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: ktlint
      run: ./gradlew ktlint
  unit-tests:
    name: Codegen unit tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_version }}
    - name: test
      run: ./gradlew :codegen:test
    - name: aws tests
      run: ./gradlew :aws:sdk-codegen:test
  integration-tests:
    name: Codegen integration tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      name: Gradle Cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - uses: actions/cache@v2
      name: Cargo Cache
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_version }}
    - name: integration-tests
      run: ./gradlew :codegen-test:test
    - uses: actions/upload-artifact@v2
      name: Upload Codegen Output for inspection
        # Always upload the output even if the tests failed
      if: ${{ always() }}
      with:
        name: codegen-output
        path: |
          codegen-test/build/smithyprojections/codegen-test/*/rust-codegen/
          codegen-test/build/smithyprojections/codegen-test/Cargo.toml
  runtime-tests:
    name: Rust runtime tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Format Check
      run: rustfmt --check --edition 2018 $(find -name '*.rs' -print)
    - name: execute runtime tests
      run: ./rust-runtime/test.sh

  generate-sdk:
    name: Generate an AWS SDK
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      name: Gradle Cache
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ env.java_version }}
    - name: Generate the SDK
      run: ./gradlew :aws:sdk:assemble
    - name: Generate the SDK...again?
      run: ./gradlew :aws:sdk:assemble
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/upload-artifact@v2
      name: Upload SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-${{ github.sha }}
        path: |
          aws/sdk/build/aws-sdk/
          !aws/sdk/build/aws-sdk/target

  check-sdk:
    name: cargo check AWS SDK
    needs: generate-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargocheck
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      name: Download SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-${{ github.sha }}
        path: aws-sdk
    - name: Cargo Check
      run: cargo check --lib --tests --benches
      working-directory: aws-sdk
      env:
        RUSTFLAGS: -D warnings
  test-sdk:
    name: cargo test AWS SDK
    needs: generate-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargotest
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: "rustfmt,clippy"
        default: true
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      name: Download SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-${{ github.sha }}
        path: aws-sdk
    - name: Cargo Test
      run: cargo test
      working-directory: aws-sdk
      env:
        RUSTFLAGS: -D warnings
  docs-sdk:
    name: cargo docs AWS SDK
    needs: generate-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargodocs
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      name: Download SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-${{ github.sha }}
        path: aws-sdk
    - name: Cargo Docs
      run: cargo doc --no-deps --document-private-items
      working-directory: aws-sdk
      env:
        RUSTDOCFLAGS: -D warnings
  clippy-sdk:
    name: cargo clippy AWS SDK
    needs: generate-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargoclippy
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.rust_version }}
        components: ${{ env.rust_toolchain_components }}
        default: true
    - name: Generate a name for the SDK
      id: gen-name
      run: echo "name=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - uses: actions/download-artifact@v2
      name: Download SDK Artifact
      with:
        name: aws-sdk-${{ env.name }}-${{ github.sha }}
        path: aws-sdk
    - name: Cargo Clippy
      run: cargo clippy -- -D warnings
      working-directory: aws-sdk
